/**
 * LoopBack Application
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Dose from './model/Dose';
import DosePartial from './model/DosePartial';
import DoseWithRelations from './model/DoseWithRelations';
import Filter from './model/Filter';
import Filter1 from './model/Filter1';
import Filter2 from './model/Filter2';
import Filter3 from './model/Filter3';
import Ingredient from './model/Ingredient';
import IngredientPartial from './model/IngredientPartial';
import IngredientWithRelations from './model/IngredientWithRelations';
import IngredientsIdFields from './model/IngredientsIdFields';
import InlineResponse200 from './model/InlineResponse200';
import LoopbackCount from './model/LoopbackCount';
import NewDoseInRecipe from './model/NewDoseInRecipe';
import NewIngredient from './model/NewIngredient';
import NewRecipe from './model/NewRecipe';
import Recipe from './model/Recipe';
import RecipePartial from './model/RecipePartial';
import RecipeWithRelations from './model/RecipeWithRelations';
import RecipesIdFields from './model/RecipesIdFields';
import RecipesIdInclude from './model/RecipesIdInclude';
import RecipesIdScope from './model/RecipesIdScope';
import DoseIngredientControllerApi from './api/DoseIngredientControllerApi';
import IngredientControllerApi from './api/IngredientControllerApi';
import PingControllerApi from './api/PingControllerApi';
import RecipeControllerApi from './api/RecipeControllerApi';
import RecipeDoseControllerApi from './api/RecipeDoseControllerApi';


/**
* JS API client generated by OpenAPI Generator.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var LoopBackApplication = require('index'); // See note below*.
* var xxxSvc = new LoopBackApplication.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new LoopBackApplication.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new LoopBackApplication.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new LoopBackApplication.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Dose model constructor.
     * @property {module:model/Dose}
     */
    Dose,

    /**
     * The DosePartial model constructor.
     * @property {module:model/DosePartial}
     */
    DosePartial,

    /**
     * The DoseWithRelations model constructor.
     * @property {module:model/DoseWithRelations}
     */
    DoseWithRelations,

    /**
     * The Filter model constructor.
     * @property {module:model/Filter}
     */
    Filter,

    /**
     * The Filter1 model constructor.
     * @property {module:model/Filter1}
     */
    Filter1,

    /**
     * The Filter2 model constructor.
     * @property {module:model/Filter2}
     */
    Filter2,

    /**
     * The Filter3 model constructor.
     * @property {module:model/Filter3}
     */
    Filter3,

    /**
     * The Ingredient model constructor.
     * @property {module:model/Ingredient}
     */
    Ingredient,

    /**
     * The IngredientPartial model constructor.
     * @property {module:model/IngredientPartial}
     */
    IngredientPartial,

    /**
     * The IngredientWithRelations model constructor.
     * @property {module:model/IngredientWithRelations}
     */
    IngredientWithRelations,

    /**
     * The IngredientsIdFields model constructor.
     * @property {module:model/IngredientsIdFields}
     */
    IngredientsIdFields,

    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200,

    /**
     * The LoopbackCount model constructor.
     * @property {module:model/LoopbackCount}
     */
    LoopbackCount,

    /**
     * The NewDoseInRecipe model constructor.
     * @property {module:model/NewDoseInRecipe}
     */
    NewDoseInRecipe,

    /**
     * The NewIngredient model constructor.
     * @property {module:model/NewIngredient}
     */
    NewIngredient,

    /**
     * The NewRecipe model constructor.
     * @property {module:model/NewRecipe}
     */
    NewRecipe,

    /**
     * The Recipe model constructor.
     * @property {module:model/Recipe}
     */
    Recipe,

    /**
     * The RecipePartial model constructor.
     * @property {module:model/RecipePartial}
     */
    RecipePartial,

    /**
     * The RecipeWithRelations model constructor.
     * @property {module:model/RecipeWithRelations}
     */
    RecipeWithRelations,

    /**
     * The RecipesIdFields model constructor.
     * @property {module:model/RecipesIdFields}
     */
    RecipesIdFields,

    /**
     * The RecipesIdInclude model constructor.
     * @property {module:model/RecipesIdInclude}
     */
    RecipesIdInclude,

    /**
     * The RecipesIdScope model constructor.
     * @property {module:model/RecipesIdScope}
     */
    RecipesIdScope,

    /**
    * The DoseIngredientControllerApi service constructor.
    * @property {module:api/DoseIngredientControllerApi}
    */
    DoseIngredientControllerApi,

    /**
    * The IngredientControllerApi service constructor.
    * @property {module:api/IngredientControllerApi}
    */
    IngredientControllerApi,

    /**
    * The PingControllerApi service constructor.
    * @property {module:api/PingControllerApi}
    */
    PingControllerApi,

    /**
    * The RecipeControllerApi service constructor.
    * @property {module:api/RecipeControllerApi}
    */
    RecipeControllerApi,

    /**
    * The RecipeDoseControllerApi service constructor.
    * @property {module:api/RecipeDoseControllerApi}
    */
    RecipeDoseControllerApi
};
